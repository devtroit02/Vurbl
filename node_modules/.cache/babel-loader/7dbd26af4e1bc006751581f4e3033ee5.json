{"ast":null,"code":"var merge = require('utils-merge');\n\nfunction SessionManager(options, serializeUser) {\n  if (typeof options == 'function') {\n    serializeUser = options;\n    options = undefined;\n  }\n\n  options = options || {};\n  this._key = options.key || 'passport';\n  this._serializeUser = serializeUser;\n}\n\nSessionManager.prototype.logIn = function (req, user, options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  if (!req.session) {\n    return cb(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?'));\n  }\n\n  var self = this;\n  var prevSession = req.session; // regenerate the session, which is good practice to help\n  // guard against forms of session fixation\n\n  req.session.regenerate(function (err) {\n    if (err) {\n      return cb(err);\n    }\n\n    self._serializeUser(user, req, function (err, obj) {\n      if (err) {\n        return cb(err);\n      }\n\n      if (options.keepSessionInfo) {\n        merge(req.session, prevSession);\n      }\n\n      if (!req.session[self._key]) {\n        req.session[self._key] = {};\n      } // store user information in session, typically a user id\n\n\n      req.session[self._key].user = obj; // save the session before redirection to ensure page\n      // load does not happen before session is saved\n\n      req.session.save(function (err) {\n        if (err) {\n          return cb(err);\n        }\n\n        cb();\n      });\n    });\n  });\n};\n\nSessionManager.prototype.logOut = function (req, options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  if (!req.session) {\n    return cb(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?'));\n  }\n\n  var self = this; // clear the user from the session object and save.\n  // this will ensure that re-using the old session id\n  // does not have a logged in user\n\n  if (req.session[this._key]) {\n    delete req.session[this._key].user;\n  }\n\n  var prevSession = req.session;\n  req.session.save(function (err) {\n    if (err) {\n      return cb(err);\n    } // regenerate the session, which is good practice to help\n    // guard against forms of session fixation\n\n\n    req.session.regenerate(function (err) {\n      if (err) {\n        return cb(err);\n      }\n\n      if (options.keepSessionInfo) {\n        merge(req.session, prevSession);\n      }\n\n      cb();\n    });\n  });\n};\n\nmodule.exports = SessionManager;","map":null,"metadata":{},"sourceType":"script"}